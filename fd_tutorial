fd
https://github.com/sharkdp/fd
########################################################################https://github.com/sharkdp/fd

fd_examples
├── .gitignore
├── desub_dir
│   └── old_test.txt
├── not_file
├── sub_dir
│   ├── .here_be_tests
│   ├── more_dir
│   │   ├── .not_here
│   │   ├── even_further_down
│   │   │   ├── not_me.sh
│   │   │   ├── test_seven
│   │   │   └── testing_eight
│   │   ├── not_file -> /Users/fd_user/Desktop/fd_examples/not_file
│   │   └── test_file_six
│   ├── new_test.txt
│   ├── test_file_five
│   ├── test_file_four
│   └── test_file_three
├── test_file_one
├── test_file_two
├── test_one
└── this_is_a_test



########################################################################

Tutorial
First, to see all command line options, you can get fd's help text by running:

fd --help
For the sake of this tutorial, let's assume we have a directory with the following file structure:

fd_examples
├── .gitignore
├── desub_dir
│   └── old_test.txt
├── not_file
├── sub_dir
│   ├── .here_be_tests
│   ├── more_dir
│   │   ├── .not_here
│   │   ├── even_further_down
│   │   │   ├── not_me.sh
│   │   │   ├── test_seven
│   │   │   └── testing_eight
│   │   ├── not_file -> /Users/fd_user/Desktop/fd_examples/not_file
│   │   └── test_file_six
│   ├── new_test.txt
│   ├── test_file_five
│   ├── test_file_four
│   └── test_file_three
├── test_file_one
├── test_file_two
├── test_one
└── this_is_a_test
If fd is called with a single argument (the search pattern), it will perform a recursive search through the current directory. To search for all files that include the string "test", we can simply run:

> fd test
sub_dir/more_dir/even_further_down/test_seven
sub_dir/more_dir/even_further_down/testing_eight
sub_dir/more_dir/test_file_six
sub_dir/test_file_five
sub_dir/test_file_three
sub_dir/test_four
test_file_one
test_file_two
test_one
this_is_a_test
The search pattern is treated as a regular expression. To show only entries that start with "test", we can simply run:

> fd '^test'
sub_dir/more_dir/even_further_down/test_seven
sub_dir/more_dir/even_further_down/testing_eight
sub_dir/more_dir/test_file_six
sub_dir/test_file_five
sub_dir/test_file_three
sub_dir/test_four
test_file_one
test_file_two
test_one
Note that fd does not show hidden files (.here_be_tests) by default. To change this, we can use the -H (or --hidden) option:

> fd -H test
sub_dir/.here_be_tests
sub_dir/more_dir/even_further_down/test_seven
sub_dir/more_dir/even_further_down/testing_eight
sub_dir/more_dir/test_file_six
sub_dir/test_file_five
sub_dir/test_file_four
sub_dir/test_file_three
test_file_one
test_file_two
test_one
this_is_a_test
If we are interested in showing the results from a particular directory, we can specify the root of the search as a second argument:

> fd test sub_dir
sub_dir/more_dir/even_further_down/test_seven
sub_dir/more_dir/even_further_down/testing_eight
sub_dir/more_dir/test_file_six
sub_dir/test_file_five
sub_dir/test_file_three
sub_dir/test_four
If we don't give any arguments to fd, it simply shows all entries in the current directory, recursively (like ls -R):

> fd
not_file
sub_dir
sub_dir/more_dir
sub_dir/more_dir/even_further_down
sub_dir/more_dir/even_further_down/test_seven
sub_dir/more_dir/even_further_down/testing_eight
sub_dir/more_dir/not_file
sub_dir/more_dir/test_file_six
sub_dir/test_file_five
sub_dir/test_file_three
sub_dir/test_four
test_file_one
test_file_two
test_one
this_is_a_test
If we work in a directory that is a Git repository (or includes several Git repositories), fd does not search folders (and does not show files) that match the .gitignore pattern. For example, imagine we had a .gitignore file with the following content:

*.sh
In this case, fd would not show any files that end in .sh. To disable this behavior, we can use the -I (or --ignore) option:

> fd -I me
sub_dir/more_dir/even_further_down/not_me.sh
To really search all files and directories, we can combine the hidden and ignore features to show everything (-HI):

fd -HI 'not|here'
not_file
sub_dir/.here_be_tests
sub_dir/more_dir/.not_here
sub_dir/more_dir/even_further_down/not_me.sh
sub_dir/more_dir/not_file
Searching for a file extension is easy too, using the -e (or --file-extensions) switch for file extensions:

> fd -e sh
sub_dir/more_dir/even_further_down/not_me.sh
Next, we can even use a pattern in combination with -e to search for a regex pattern over the files that end in the specified extension.

> fd -e txt test
fd_examples/desub_dir/old_test.txt
fd_examples/sub_dir/new_test.txt
What if we wanted to run a command for each of the search results? We can use xargs to do that: fd -0 'test' | xargs -0 -I {} cp {} {}.new

In this example there are a couple things to take note:

First we are telling fd we want a null character to seperate the files -0, this is important when passing to xargs.
Second, we are piping the output to xargs and telling this program to expect input null terminated with -0 (the same syntax that fd was built with).
Then for fun we are using -I to replace a string {} and lauching cp to copy the file {} to a file ending in {}.new.
fd can also show us the absolute path vs. the full path with -a (--absolute-path):

> fd -a new
/Users/fd_user/fd_examples/sub_dir/more_dir/even_further_down/test_seven.new
/Users/fd_user/fd_examples/sub_dir/more_dir/even_further_down/testing_eight.new
/Users/fd_user/fd_examples/sub_dir/more_dir/test_file_six.new
/Users/fd_user/fd_examples/sub_dir/test_file_five.new
/Users/fd_user/fd_examples/sub_dir/test_file_four.new
/Users/fd_user/fd_examples/sub_dir/test_file_three.new
/Users/fd_user/fd_examples/test_file_one.new
/Users/fd_user/fd_examples/test_file_two.new
/Users/fd_user/fd_examples/test_one.new
/Users/fd_user/fd_examples/this_is_a_test.new

########################################################################

https://docs.rs/crate/fd-find/4.0.0

########################################################################

https://docs.rs/crate/fd-find/8.1.1

Command-line options
USAGE:
    fd [FLAGS/OPTIONS] [<pattern>] [<path>...]

FLAGS:
    -H, --hidden            Search hidden files and directories
    -I, --no-ignore         Do not respect .(git|fd)ignore files
    -s, --case-sensitive    Case-sensitive search (default: smart case)
    -i, --ignore-case       Case-insensitive search (default: smart case)
    -g, --glob              Glob-based search (default: regular expression)
    -a, --absolute-path     Show absolute instead of relative paths
    -l, --list-details      Use a long listing format with file metadata
    -L, --follow            Follow symbolic links
    -p, --full-path         Search full path (default: file-/dirname only)
    -0, --print0            Separate results by the null character
    -h, --help              Prints help information
    -V, --version           Prints version information

OPTIONS:
    -d, --max-depth <depth>            Set maximum search depth (default: none)
    -t, --type <filetype>...           Filter by type: file (f), directory (d), symlink (l),
                                       executable (x), empty (e), socket (s), pipe (p)
    -e, --extension <ext>...           Filter by file extension
    -x, --exec <cmd>                   Execute a command for each search result
    -X, --exec-batch <cmd>             Execute a command with all search results at once
    -E, --exclude <pattern>...         Exclude entries that match the given glob pattern
    -c, --color <when>                 When to use colors: never, *auto*, always
    -S, --size <size>...               Limit results based on the size of files.
        --changed-within <date|dur>    Filter by file modification time (newer than)
        --changed-before <date|dur>    Filter by file modification time (older than)

ARGS:
    <pattern>    the search pattern - a regular expression unless '--glob' is used (optional)
    <path>...    the root directory for the filesystem search (optional)
This is the output of fd -h. To see the full set of command-line options, use fd --help which also includes a much more detailed help text.

Tutorial
First, to get an overview of all available command line options, you can either run fd -h for a concise help message (see above) or fd --help for a more detailed version.

Simple search
fd is designed to find entries in your filesystem. The most basic search you can perform is to run fd with a single argument: the search pattern. For example, assume that you want to find an old script of yours (the name included netflix):

> fd netfl
Software/python/imdb-ratings/netflix-details.py
If called with just a single argument like this, fd searches the current directory recursively for any entries that contain the pattern netfl.

Regular expression search
The search pattern is treated as a regular expression. Here, we search for entries that start with x and end with rc:

> cd /etc
> fd '^x.*rc$'
X11/xinit/xinitrc
X11/xinit/xserverrc
Specifying the root directory
If we want to search a specific directory, it can be given as a second argument to fd:

> fd passwd /etc
/etc/default/passwd
/etc/pam.d/passwd
/etc/passwd
Running fd without any arguments
fd can be called with no arguments. This is very useful to get a quick overview of all entries in the current directory, recursively (similar to ls -R):

> cd fd/tests
> fd
testenv
testenv/mod.rs
tests.rs
If you want to use this functionality to list all files in a given directory, you have to use a catch-all pattern such as . or ^:

> fd . fd/tests/
testenv
testenv/mod.rs
tests.rs
Searching for a particular file extension
Often, we are interested in all files of a particular type. This can be done with the -e (or --extension) option. Here, we search for all Markdown files in the fd repository:

> cd fd
> fd -e md
CONTRIBUTING.md
README.md
The -e option can be used in combination with a search pattern:

> fd -e rs mod
src/fshelper/mod.rs
src/lscolors/mod.rs
tests/testenv/mod.rs
Hidden and ignored files
By default, fd does not search hidden directories and does not show hidden files in the search results. To disable this behavior, we can use the -H (or --hidden) option:

> fd pre-commit
> fd -H pre-commit
.git/hooks/pre-commit.sample
If we work in a directory that is a Git repository (or includes Git repositories), fd does not search folders (and does not show files) that match one of the .gitignore patterns. To disable this behavior, we can use the -I (or --no-ignore) option:

> fd num_cpu
> fd -I num_cpu
target/debug/deps/libnum_cpus-f5ce7ef99006aa05.rlib
To really search all files and directories, simply combine the hidden and ignore features to show everything (-HI).

Excluding specific files or directories
Sometimes we want to ignore search results from a specific subdirectory. For example, we might want to search all hidden files and directories (-H) but exclude all matches from .git directories. We can use the -E (or --exclude) option for this. It takes an arbitrary glob pattern as an argument:

> fd -H -E .git …
We can also use this to skip mounted directories:

> fd -E /mnt/external-drive …
.. or to skip certain file types:

> fd -E '*.bak' …
To make exclude-patterns like these permanent, you can create a .fdignore file. They work like .gitignore files, but are specific to fd. For example:

> cat ~/.fdignore
/mnt/external-drive
*.bak
Note: fd also supports .ignore files that are used by other programs such as rg or ag.

If you want fd to ignore these patterns globally, you can put them in fd's global ignore file. This is usually located in ~/.config/fd/ignore in macOS or Linux, and %APPDATA%\fd\ignore in Windows.

Using fd with xargs or parallel
If we want to run a command on all search results, we can pipe the output to xargs:

> fd -0 -e rs | xargs -0 wc -l
Here, the -0 option tells fd to separate search results by the NULL character (instead of newlines). In the same way, the -0 option of xargs tells it to read the input in this way.

Deleting files
You can use fd to remove all files and directories that are matched by your search pattern. If you only want to remove files, you can use the --exec-batch/-X option to call rm. For example, to recursively remove all .DS_Store files, run:

> fd -H '^\.DS_Store$' -tf -X rm
If you are unsure, always call fd without -X rm first. Alternatively, use rms "interactive" option:

> fd -H '^\.DS_Store$' -tf -X rm -i
If you also want to remove a certain class of directories, you can use the same technique. You will have to use rms --recursive/-r flag to remove directories.

Note: there are scenarios where using fd … -X rm -r can cause race conditions: if you have a path like …/foo/bar/foo/… and want to remove all directories named foo, you can end up in a situation where the outer foo directory is removed first, leading to (harmless) "'foo/bar/foo': No such file or directory" errors in the rm call.

Troubleshooting
fd does not find my file!
Remember that fd ignores hidden directories and files by default. It also ignores patterns from .gitignore files. If you want to make sure to find absolutely every possible file, always use the options -H and -I to disable these two features:

> fd -HI …
fd doesn't seem to interpret my regex pattern correctly
A lot of special regex characters (like [], ^, $, ..) are also special characters in your shell. If in doubt, always make sure to put single quotes around the regex pattern:

> fd '^[A-Z][0-9]+$'
If your pattern starts with a dash, you have to add -- to signal the end of command line options. Otherwise, the pattern will be interpreted as a command-line option. Alternatively, use a character class with a single hyphen character:

> fd -- '-pattern'
> fd '[-]pattern'
Integration with other programs
Using fd with fzf
You can use fd to generate input for the command-line fuzzy finder fzf:

export FZF_DEFAULT_COMMAND='fd --type file'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
Then, you can type vim <Ctrl-T> on your terminal to open fzf and search through the fd-results.

Alternatively, you might like to follow symbolic links and include hidden files (but exclude .git folders):

export FZF_DEFAULT_COMMAND='fd --type file --follow --hidden --exclude .git'
You can even use fd's colored output inside fzf by setting:

export FZF_DEFAULT_COMMAND="fd --type file --color=always"
export FZF_DEFAULT_OPTS="--ansi"
For more details, see the Tips section of the fzf README.

Using fd with emacs
The emacs package find-file-in-project can use fd to find files.

After installing find-file-in-project, add the line (setq ffip-use-rust-fd t) to your ~/.emacs or ~/.emacs.d/init.el file.

In emacs, run M-x find-file-in-project-by-selected to find matching files. Alternatively, run M-x find-file-in-project to list all available files in the project.

Printing fd's output as a tree
To format the output of fd similar to the tree command, install as-tree and pipe the output of fd to as-tree:

fd | as-tree
This can be more useful than running tree by itself because tree does not ignore any files by default, nor does it support as rich a set of options as fd does to control what to print:

❯ fd --extension rs | as-tree
.
├── build.rs
└── src
    ├── app.rs
    └── error.rs
For more information about as-tree, see the as-tree README.

License


EJEMPLOS:
fd
fd | head
fd -e jpg

# fd -e jpg -x chmod 644 {}
The above will find all files with extension jpg and will run chmod 644 <path-to-file>.

Here is some useful explanation and usage of the brackets:

{} – A placeholder which will be changed with the path of the search result (wp-content/uploads/01.jpg).
{.} – similar to {}, but without using the file extension (wp-content/uploads/01).
{/}: A placeholder that will be replaced by the basename of the search result (01.jpg).
{//}: Parent directory of the discovered path (wp-content/uploads).
{/.}: Only the basename, without the extension (01).

Printing fd's output as a tree
To format the output of fd similar to the tree command, install as-tree and pipe the output of fd to as-tree:

fd | as-tree
